// seq-tools.h [INTERFACE]
// A module for working with Sequences

#include <stdbool.h>
#include "sequence.h"

// NOTE: each of the following requires that all pointers are not NULL

// Sequence_build(n) creates a NEW sequence of length n
//   with the items 0, 1, ..., n-1
struct Sequence *Sequence_build(int n);

// Sequence_map(fp, seq) applies fp to each item (eg., item_k = fp(item_k))
// effects: modifies seq
void Sequence_map(int (* fp)( int ), struct Sequence *seq);

// Sequence_equal(seq1, seq2) determines if seq1 and seq2 are identical
bool Sequence_equal(const struct Sequence *seq1, const struct Sequence *seq2);

// Sequence_add_sum(seq) modifies seq so that each item (item_k) is the
//   sum of itself and all previous items (item_k = item_0 + ... item_k-1)
//   for example, the sequence 1 2 3 becomes 1 3 6
// effects: modifies seq
void Sequence_add_sum(struct Sequence *seq);

// Sequence_avg_and_variance(seq, &avg, &var) modifies avg and var
//   to store the average (mean) of all items [rounded down]
//   and the variance of all items.
//   The variance is calculated by summing over all items the difference
//   between the item and the average squared, divided by the number of items
//     sum [(item_k - avg)^2] / length
// requires: length(seq) > 0
// effects: modifies *avg and *var
void Sequence_avg_and_variance(const struct Sequence *seq, int *avg, int *var);

// Sequence_collatz(n) creates a NEW sequence generated by 
//   the collatz series starting with a positive integer n
//   for example Sequence_collatz(6) produces the sequence:
//     6, 3, 10, 5, 16, 8, 4, 2, 1
// requires: n >= 1
struct Sequence *Sequence_collatz(int n);

// Sequence_filter(fp, seq) removes all items from seq for which fp(item)
//   is false
// effects: modifies seq
void Sequence_filter(bool (*fp)(int), struct Sequence *seq);

// Sequence_foldl(fp, base, seq) applies the foldl function (from Racket)
//   to the elements of seq, starting with the initial value of base.
//   in other words, fp(item_n-1, ... fp(item_1, fp(item_0, base)))
//   if seq is empty, it returns base
int Sequence_foldl(int (*fp)(int, int), int base, const struct Sequence *seq);